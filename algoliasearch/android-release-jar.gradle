/*
 * Copyright (c) 2015 Algolia
 * http://www.algolia.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// ./gradlew clean build generateRelease
apply plugin: 'maven'
apply plugin: 'signing'

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION
def localReleaseDest = "${buildDir}/release/${version}"

configurations {
    optional
    compile.extendsFrom optional
}

signing {
    sign configurations.archives
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (!name.equals("debug")) {
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        artifacts.add('archives', task);
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        pom.project {
            name 'Algolia Search API Client for Android'
            packaging 'aar'
            description 'This Android library lets you easily use the Algolia Search API from your Android Application. It wraps the Algolia Search REST API.'
            url 'https://github.com/algolia/algoliasearch-client-android'

            scm {
                url 'https://github.com/algolia/algoliasearch-client-android'
                connection 'scm:git:https://github.com/algolia/algoliasearch-client-android.git'
            }

            licenses {
                license {
                    name 'MIT'
                    url 'http://opensource.org/licenses/MIT'
                }
            }

            developers {
                developer {
                    id 'algolia'
                    name 'The Algolia Team'
                    email 'support@algolia.com'
                }
            }
        }

        pom.withXml {
            asNode().dependencies.dependency.findAll { xmlDep ->
                // mark optional dependencies
                if (project.configurations.optional.allDependencies.findAll { dep ->
                    xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                }) {
                    def xmlOptional = xmlDep.optional[0];
                    if (!xmlOptional) {
                        xmlOptional = xmlDep.appendNode('optional')
                    }
                    xmlOptional.value = 'true';
                }
            }
        }

        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: project.hasProperty('nexusUsername') ? project['nexusUsername'] : 'FIXME', password: project.hasProperty('nexusPassword') ? project['nexusPassword'] : 'FIXME')
        }
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)


artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
