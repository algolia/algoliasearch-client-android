fastlane_require "increment_semver"
fastlane_require "json"
fastlane_require "httparty"

actions_path 'actions/'
fastlane_version "2.108.0"
default_platform :android

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "clean test", build_type: "Release")
  end

  desc "Deploy the library. Available options: type:major|minor|patch optional: branch:YOUR_BRANCH (default master) notest:true|false (default false)"
  lane :deploy do |options|
    # Arguments handling
    branch = options[:branch] || "master"
    notest = options[:notest] || false
    type = options[:type]
    type.nil? and UI.user_error!("You need to specify a type.")
    ["major", "minor", "patch"].include? type or UI.user_error!("Type #{type} is not a valid type (patch/minor/major")

    # Compute next version number
    current_version = get_version_name(
      gradle_file_path:"algoliasearch/common.gradle",
      ext_constant_name:"PUBLISH_VERSION"
    ).tr("'", "")
    puts "Current version: #{current_version}"
    version_number = increment_semver(current_version, type)
    puts "New version: #{version_number}"

    # Ensure branch is master & WC clean, then pull changes
    if sh("git rev-parse origin/master") != sh("git rev-parse HEAD")
      raise "Error: master and HEAD hashes do not match, meaning that we are probably not on master and therefore can't deploy"
    end
    sh("git checkout ../Gemfile.lock") # Ignore different bundle version changing Gemfile https://discuss.bitrise.io/t/5176/5
    prepare_git()

    # Generate changelog updates
    changes = sh("conventional-changelog --preset angular --output-unreleased", log:false)
    changes_lines = changes.lines[1..-1] # Remove header
    changes_lines[0] = "## #{version_number}"
    changes = changes_lines.join
    puts "Changes: #{changes}"
    file_edit("../CHANGELOG.md", /^(# Changelog\n+)/, "\\1\n#{changes}\n")

    # Tests / deployment
    notest == false or test

    # Release the new version
    sh("cd .. && ./release.sh #{version_number}")

    # Remove temporary version tags
    sh("git tag --delete minor major patch | true")
    sh("git push origin :refs/tag/patch :refs/tag/minor :refs/tag/major")

    # Send PR
    token = ENV["GITHUB_TOKEN"]
    pull_request_url = create_pull_request(
      api_token: token,
      repo: "algolia/algoliasearch-client-android",
      title: "chore(release): Version #{version_number} [ci skip]",
      head: "version-#{version_number}",
      base: "master",
      body: "Please check the files before merging in case I've overidden something accidentally."
    )
    sh("envman add --key GITHUB_PR_URL --value #{pull_request_url}")

    # Post release on GitHub
    github_release = set_github_release(
      repository_name: "algolia/algoliasearch-client-android",
      api_token: token,
      name: version_number,
      tag_name: version_number,
      description: changes.lines[2..-1].join,
      commitish: "master"
    )
    puts "Release posted: #{github_release['html_url']}."
  end
end

def prepare_git(ensure_clean=true)
  masterHash = sh("git rev-parse origin/master")
  headHash = sh("git rev-parse HEAD")

  if masterHash != headHash
    raise "Error: Master and Head Hashes do not match, meaning that we are probably not on Master and therefore can't deploy"
    #TODO: Does it make sense to checkout master if we raise error when HEAD != master?
  end
  sh("git checkout master")

  git_pull
  if ensure_clean
    ensure_git_status_clean(show_uncommitted_changes:true)
  end
end

def file_edit(filename, regexp, replacement)
  Tempfile.open(".#{File.basename(filename)}", File.dirname(filename)) do |tempfile|
    File.open(filename).each do |line|
      tempfile.puts line.gsub(regexp, replacement)
    end
    tempfile.fdatasync
    tempfile.close
    stat = File.stat(filename)
    FileUtils.chown stat.uid, stat.gid, tempfile.path
    FileUtils.chmod stat.mode, tempfile.path
    FileUtils.mv tempfile.path, filename
  end
end